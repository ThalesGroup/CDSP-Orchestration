---
# (c) 2023 Thales Group. All rights reserved.
# Author: Anurag Jain, Developer Advocate, Thales
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

## Verify that integration_config was specified
- block:
  - assert:
      that:
        - this_node_connection_string is defined
        - csr_cn is defined
        - cert_bundle_pem is defined
        - cert_format is defined
        - source_interface is defined
        - port is defined
        - type is defined
        - mode is defined
        - new_port is defined

## Validate the create interface module
- block:
  - name: "Create Interface"
    thales.ciphertrust.interface_save:
      localNode: "{{ this_node_connection_string }}"
      op_type: create
      port: "{{ port }}"
      auto_registration: false
      interface_type: "{{ type }}"
      mode: "{{ mode }}"
      network_interface: all
    register: _result_create

  - assert:
      that:
        - _result_create is not failed
        - _result_create.response.id is string

  - name: "Save interface ID"
    set_fact:
      interface_id: "{{ _result_create.response.id }}"

  - name: "Patch Interface"
    thales.ciphertrust.interface_save:
      op_type: "patch"
      op_type: patch
      interface_id: "{{ interface_id }}"
      port: "{{ new_port }}"
      localNode: "{{ this_node_connection_string }}"
    register: _result_patch

  - assert:
      that:
        - _result_patch is not failed
        - _result_patch.response.message is match("Resource updated succesfully")

  ## Validate the interface actions
  - name: "Add Cert to Interface"
    thales.ciphertrust.interface_actions:
      localNode: "{{ this_node_connection_string }}"
      op_type: put_certificate
      interface_id: "{{ interface_id }}"
      certificate: "{{ cert_bundle_pem }}"
      generate: true
      format: "{{ cert_format }}"
    register: _result_add_cert

  - assert:
      that:
        - _result_add_cert is not failed
        - _result_add_cert.response.message is match("Resource updated sucessfully")

  - name: "Enable Interface"
    thales.ciphertrust.interface_actions:
      op_type: enable
      interface_id: "{{ interface_id }}"
      localNode: "{{ this_node_connection_string }}"
    register: _result_enable

  - assert:
      that:
        - _result_enable is not failed
        - _result_enable.response.message is match("Resource created sucessfully")

  - name: "Disable Interface"
    thales.ciphertrust.interface_actions:
      op_type: disable
      interface_id: "{{ interface_id }}"
      localNode: "{{ this_node_connection_string }}"
    register: _result_disable

  - assert:
      that:
        - _result_disable is not failed
        - _result_disable.response.message is match("Resource created sucessfully")

  - name: "Restore default TLS Ciphers"
    thales.ciphertrust.interface_actions:
      op_type: restore-default-tls-ciphers
      interface_id: "{{ interface_id }}"
      localNode: "{{ this_node_connection_string }}"
    register: _result_restore

  - assert:
      that:
        - _result_restore is not failed
        - _result_restore.response.message is match("Resource created sucessfully")

  - name: "Create CSR"
    thales.ciphertrust.interface_actions:
      op_type: csr
      interface_id: "{{ interface_id }}"
      cn: "{{ csr_cn }}"
      localNode: "{{ this_node_connection_string }}"
    register: _result_create_csr

  - assert:
      that:
        - _result_create_csr is not failed
        - _result_create_csr.response.csr is match("Resource created sucessfully")

#  - name: "Auto Generate Server Certificate"
#    thales.ciphertrust.interface_actions:
#      op_type: auto-gen-server-cert
#      interface_id: "{{ interface_id }}"
#      localNode: "{{ this_node_connection_string }}"
#    register: _result_autogen

#  - assert:
#      that:
#        - _result_autogen is not failed
#        - _result_autogen.response.message is match("Resource created sucessfully")

  - name: "Use Certificate"
    thales.ciphertrust.interface_actions:
      op_type: use-certificate
      copy_from: "{{ source_interface }}"
      interface_id: "{{ interface_id }}"
      localNode: "{{ this_node_connection_string }}"
    register: _result_use_cert

  - assert:
      that:
        - _result_use_cert is not failed
        - _result_use_cert.response.message is match("Resource created sucessfully")